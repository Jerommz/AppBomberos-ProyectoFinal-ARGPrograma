/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bomberos.Vistas;

import bomberos.AccesoADatos.BrigadaData;
import bomberos.AccesoADatos.CuartelData;
import bomberos.AccesoAdatos.BomberoData;
import bomberos.Entidades.Bombero;
import bomberos.Entidades.Brigada;
import bomberos.Entidades.Cuartel;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jero
 */
public class Administracion extends javax.swing.JPanel {

    CuartelData cuakDB = new CuartelData();
    Cuartel cuar = new Cuartel();
    BrigadaData briDB = new BrigadaData();
    Brigada briga = new Brigada();
    BomberoData bomDB = new BomberoData();
    Bombero bombero = new Bombero();
    private Connection con;
    private List<Brigada> bri = new ArrayList<>();
    private List<Cuartel> cuartel = new ArrayList<>();
    private List<Bombero> bomberolista = new ArrayList<>();
    private DefaultTableModel modeloBombero;
    private DefaultTableModel modeloCuartel;
    private DefaultTableModel modeloBrigada;
    public Administracion() {
        initComponents();
//        botones();
        bri = briDB.obtenerBrigadas();
        cuartel = cuakDB.obtenerCuarteles();
        bomberolista = bomDB.listarBomberosAdministracion();
        modeloBombero = new DefaultTableModel();
        modeloCuartel = new DefaultTableModel();
        modeloBrigada = new DefaultTableModel();
        CuartelData cuakDB = new CuartelData();
        Cuartel cuar = new Cuartel();
        BrigadaData briDB = new BrigadaData();
        Brigada briga = new Brigada();
        BomberoData bomDB = new BomberoData();
        Bombero bombero = new Bombero();

        cargarBomberos();
        cargarBrigadas();
        cargarCuartel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRoot = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        panelInterno = new javax.swing.JPanel();
        escritorio = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtcargar = new javax.swing.JTable();
        jCbombero = new javax.swing.JComboBox<>();
        jCCuartel = new javax.swing.JComboBox<>();
        jCBrigada = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTcuartel = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTbrigada = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        panelRoot.setPreferredSize(new java.awt.Dimension(1280, 640));

        jPanel1.setBackground(new Color(0,0,0,0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 600));

        jPanel2.setBackground(new java.awt.Color(161, 27, 27,20));
        jPanel2.setMinimumSize(new java.awt.Dimension(1100, 640));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 70);
        flowLayout1.setAlignOnBaseline(true);
        jPanel2.setLayout(flowLayout1);

        panelInterno.setBackground(new Color(161, 27, 27,180));
        panelInterno.setPreferredSize(new java.awt.Dimension(1000, 500));
        panelInterno.setLayout(new java.awt.BorderLayout());

        escritorio.setBackground(new java.awt.Color(255, 0, 51));

        jtcargar.setBackground(new java.awt.Color(204, 204, 255));
        jtcargar.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jtcargar.setForeground(new java.awt.Color(102, 102, 255));
        jtcargar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtcargar.setSelectionForeground(new java.awt.Color(204, 204, 255));
        jtcargar.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtcargar);

        jCbombero.setBackground(new java.awt.Color(255, 204, 204));
        jCbombero.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCbomberoItemStateChanged(evt);
            }
        });
        jCbombero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbomberoActionPerformed(evt);
            }
        });

        jCCuartel.setBackground(new java.awt.Color(255, 204, 204));
        jCCuartel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCCuartelActionPerformed(evt);
            }
        });

        jCBrigada.setBackground(new java.awt.Color(255, 204, 204));
        jCBrigada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBrigadaActionPerformed(evt);
            }
        });

        jLabel2.setText("BOMBEROS");

        jLabel3.setText("BRIGADAS");

        jLabel4.setText("CUARTELES");

        jTcuartel.setBackground(new java.awt.Color(204, 204, 255));
        jTcuartel.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createCompoundBorder()));
        jTcuartel.setForeground(new java.awt.Color(255, 102, 102));
        jTcuartel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTcuartel.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTcuartel);

        jTbrigada.setBackground(new java.awt.Color(204, 204, 255));
        jTbrigada.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jTbrigada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbrigada.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTbrigada);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioLayout.createSequentialGroup()
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCbombero, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(escritorioLayout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(jLabel3))
                            .addGroup(escritorioLayout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jCCuartel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel4))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                                .addComponent(jCBrigada, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(65, 65, 65)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCCuartel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCbombero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBrigada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(45, 45, 45))
        );

        panelInterno.add(escritorio, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(panelInterno);

        jLabel1.setBackground(new java.awt.Color(255, 102, 102));
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fondoBombero.jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(1280, 853));
        jLabel1.setMinimumSize(new java.awt.Dimension(1280, 640));
        jLabel1.setPreferredSize(new java.awt.Dimension(1280, 640));
        jPanel2.add(jLabel1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1217, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelRootLayout = new javax.swing.GroupLayout(panelRoot);
        panelRoot.setLayout(panelRootLayout);
        panelRootLayout.setHorizontalGroup(
            panelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        panelRootLayout.setVerticalGroup(
            panelRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRoot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRoot, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCbomberoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbomberoActionPerformed
        //cargarBomberos()
       // if(jtcargar.isEnabled() ){
        jtcargar.setModel(modeloBombero);
        armarCabeceraBombero();
        modeloBombero.setRowCount(0); // Limpia la tabla antes de agregar nuevos datos
        ArrayList<Bombero> bomberos = (ArrayList<Bombero>) bomDB.listarBomberosAdministracion(); //  este método devuelve una lista de objetos Bombero
        for (Bombero bombero : bomberos) {
            modeloBombero.addRow(new Object[]{
                bombero.getId_Bombero(),
                bombero.getNombre_ape(),
                bombero.getDni(),
                bombero.getGrupo_sang(),
                bombero.getFecha(),
                bombero.getCelular(),
                bombero.getCodBrigada(),
                bombero.isEstado(),});
        }
        //jtcargar.setModel(modeloBombero);
   // }

    }//GEN-LAST:event_jCbomberoActionPerformed

    private void jCBrigadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBrigadaActionPerformed
        //cargarBrigadas();
        //if(jTbrigada!=null ){
        jTbrigada.setModel(modeloBrigada);
        armarCabeceraBrigada();
        modeloBrigada.setRowCount(0);
        ArrayList<Brigada> brigadas = (ArrayList<Brigada>) briDB.obtenerBrigadas();
        for (Brigada brigada : brigadas) {
            modeloBrigada.addRow(new Object[]{
                brigada.getCodBrigada(),
                brigada.getNombre_br(),
                brigada.getEspecialidad(),
                brigada.isLibre(),
                brigada.getCodCuartel(),});
        }
       // jTbrigada.setModel(modeloBrigada);
    //}
 
    }//GEN-LAST:event_jCBrigadaActionPerformed

    private void jCCuartelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCCuartelActionPerformed
        //cargarCuartel();
        //if(jTcuartel!=null ){
          jTcuartel.setModel(modeloCuartel);
        armarCabeceraCuartel();
        modeloCuartel.setRowCount(0);
        ArrayList<Cuartel>cuarteles = (ArrayList<Cuartel>)cuakDB.obtenerCuarteles();
        for(Cuartel cuartel :cuarteles){
        modeloCuartel.addRow(new Object[]{
            cuartel.getNombre_cuartel(),
            cuartel.getDireccion(),
            cuartel.getCoord_X(),
            cuartel.getCoord_Y(),
            cuartel.getTelefono(),
            cuartel.getCorreo(),
            
    });
        }
        //jTcuartel.setModel(modeloCuartel);
        //}
        
    }//GEN-LAST:event_jCCuartelActionPerformed

    private void jCbomberoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCbomberoItemStateChanged
     borrarFilasTabla(); // Elimina las filas existentes
    if (evt.getStateChange() == ItemEvent.SELECTED) {
        if (jCbombero.getSelectedItem() instanceof Bombero) {
            String nombreSeleccionado = ((Bombero) jCbombero.getSelectedItem()).getNombre_ape();
            List<Bombero> bomberosPorNombre = bomDB.listarBomberosPorNombre(nombreSeleccionado);
            for (Bombero bombero : bomberosPorNombre) {
                Object[] rowData = {
                    bombero.getId_Bombero(),
                    bombero.getNombre_ape(),
                    bombero.getDni(),
                    bombero.getGrupo_sang(),
                    bombero.getFecha(),
                    bombero.getCelular(),
                    bombero.getCodBrigada(),
                    bombero.isEstado()
                };
                modeloBombero.addRow(rowData); // Agrega la fila con los datos del bombero
            }
            jtcargar.setModel(modeloBombero); // Vuelve a asignar el modelo a la tabla
        }
    
    }//GEN-LAST:event_jCbomberoItemStateChanged
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel escritorio;
    private javax.swing.JComboBox<String> jCBrigada;
    private javax.swing.JComboBox<String> jCCuartel;
    private javax.swing.JComboBox<String> jCbombero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTbrigada;
    private javax.swing.JTable jTcuartel;
    private javax.swing.JTable jtcargar;
    private javax.swing.JPanel panelInterno;
    private javax.swing.JPanel panelRoot;
    // End of variables declaration//GEN-END:variables

//    public void botones() {
//        JButton btns[] = {botonAgregarBomberos, botonEliminarBomberos, botonModificarBomberos, jButton1};
//        for (JButton btn : btns) {
//            btn.setBackground(new Color(184, 34, 34));
//            btn.setUI(new BasicButtonUI());
//            btn.addMouseListener(new MouseListener() {
//                @Override
//                public void mouseClicked(MouseEvent e) {
//                }
//
//                @Override
//                public void mousePressed(MouseEvent e) {
//                }
//
//                @Override
//                public void mouseReleased(MouseEvent e) {
//                }
//
//                @Override
//                public void mouseEntered(MouseEvent e) {
//                    btn.setBackground(new Color(252, 68, 22));
//                }
//
//                @Override
//                public void mouseExited(MouseEvent e) {
//                    btn.setBackground(new Color(184, 34, 34));
//                }
//            });
//        }
//    }
//    public void calendar() {
//        JTextField dateField = (JTextField) dateFechaNacBombero.getDateEditor().getUiComponent();
//        dateField.setEditable(false);
//    }
    public void cargarBomberos() {
        jCbombero.addItem("Selleccione bombero");
        for (int i = 0; i < bomberolista.size(); i++) {
            Bombero bombero = bomberolista.get(i);
            jCbombero.addItem(bombero.getNombre_ape());
        }

    }

    public void cargarBrigadas() {
        jCBrigada.addItem("seleccione brigada");
        for (int i = 0; i < bri.size(); i++) {
            Brigada brigada = bri.get(i);
            jCBrigada.addItem(brigada.getNombre_br());

        }

    }

    public void cargarCuartel() {
        jCCuartel.addItem("seleccione cuartel");
        for (int i = 0; i < cuartel.size(); i++) {
            Cuartel cuartel1 = cuartel.get(i);
            jCCuartel.addItem(cuartel1.getNombre_cuartel());

        }

    }

    public void armarCabeceraBombero() {

        ArrayList<Object> filasCabecera = new ArrayList<>();
        filasCabecera.add("ID");
        filasCabecera.add("NOMBRE_APELLIDO");
        filasCabecera.add("DNI");
        filasCabecera.add("GRUPO_SANGRE");
        filasCabecera.add("FECHA_DE_INGRESO");
        filasCabecera.add("CELULAR");
        filasCabecera.add("CODIGO_BRIGADA");
        filasCabecera.add("ESTADO");
        for (Object it : filasCabecera) {
            modeloBombero.addColumn(it);
        }
        jtcargar.setModel(modeloBombero);
    }

    public void armarCabeceraCuartel() {
        ArrayList<Object> filasCabecera = new ArrayList<>();
        filasCabecera.add("NOMBRE_CUARTEL");
        filasCabecera.add("DIRECCION");
        filasCabecera.add("COORDENADAS X");
        filasCabecera.add("COORDENADAS Y");
        filasCabecera.add("TELEFONO");
        filasCabecera.add("CORREO");
        for (Object it : filasCabecera) {
            modeloCuartel.addColumn(it);
        }
        jTcuartel.setModel(modeloCuartel);
    }

    public void armarCabeceraBrigada() {
        ArrayList<Object> filasCabecera = new ArrayList<>();
        filasCabecera.add("CODIGO_BRIGADA");
        filasCabecera.add("NOMBRE_BRIGADA");
        filasCabecera.add("ESPECIALIDAD");
        filasCabecera.add("LIBRE");
        filasCabecera.add("CODIGO_CUARTEL");
        for (Object it : filasCabecera) {
            modeloBrigada.addColumn(it);
        }
        jTbrigada.setModel(modeloBrigada);

    }

    private void borrarFilasTabla() {
        int indice = modeloBombero.getRowCount() - 1;
        for (int i = indice; i > 0; i--) {
            modeloBombero.removeRow(i);
        }

    }

    private void borrarCabeceraTabla() {
        int indice = modeloBombero.getColumnCount() - 1;
        for (int i = indice; i > 0; i--) {
            modeloBombero.removeTableModelListener((TableModelListener) jtcargar.getModel());

        }

    }

}
